"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const database_1 = require("../config/database/database");
const mongoose_1 = require("mongoose");
const enums = require("../enumerations");
exports.NotificationSchema = new mongoose_1.Schema({
    bucket: { type: mongoose_1.Schema.Types.ObjectId, ref: 'bucket' },
    bucketItem: { type: mongoose_1.Schema.Types.ObjectId, ref: 'bucketItem' },
    // This could be supplier, courier, particular team member, or user.  We're going to keep this generic for now.
    type: { type: Number, enum: [enums.EnumHelper.getValuesFromEnum(enums.NotificationType)] },
    notifiedBy: { type: mongoose_1.Schema.Types.ObjectId, ref: 'user' },
    createdBy: { type: mongoose_1.Schema.Types.ObjectId, ref: 'user' },
    isRead: { type: Boolean, default: false },
    readAt: { type: String },
    isActionable: { type: Boolean },
    isActionCompleted: { type: Boolean },
    isSystem: { type: Boolean },
}, { timestamps: true });
// This will compile the schema for the object, and place it in this Instance.
exports.Notification = database_1.mongoose.model('notification', exports.NotificationSchema);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZlYnJvd24vRG9jdW1lbnRzL2hha3Uvc2VydmVyL21vZGVscy9ub3RpZmljYXRpb24uaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMERBQXVEO0FBQ3ZELHVDQUEwRDtBQUUxRCx5Q0FBeUM7QUFzQjVCLFFBQUEsa0JBQWtCLEdBQUcsSUFBSSxpQkFBTSxDQUFDO0lBQ3pDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxpQkFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRTtJQUN0RCxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsaUJBQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUU7SUFDOUQsK0dBQStHO0lBQy9HLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFO0lBQzFGLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxpQkFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRTtJQUN4RCxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsaUJBQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUU7SUFDdkQsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO0lBQ3pDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7SUFDeEIsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtJQUMvQixpQkFBaUIsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7SUFDcEMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtDQUM5QixFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFFekIsOEVBQThFO0FBQ2pFLFFBQUEsWUFBWSxHQUFHLG1CQUFRLENBQUMsS0FBSyxDQUFtQixjQUFjLEVBQUUsMEJBQWtCLENBQUMsQ0FBQyIsImZpbGUiOiJtb2RlbHMvbm90aWZpY2F0aW9uLmludGVyZmFjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1vbmdvb3NlIH0gZnJvbSAnLi4vY29uZmlnL2RhdGFiYXNlL2RhdGFiYXNlJztcbmltcG9ydCB7IFNjaGVtYSwgTW9kZWwsIERvY3VtZW50LCBtb2RlbCB9IGZyb20gJ21vbmdvb3NlJztcbmltcG9ydCB7IElCYXNlTW9kZWwsIElCYXNlTW9kZWxEb2MsIElVc2VyLCBJQnVja2V0LCBJQnVja2V0SXRlbSB9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgKiBhcyBlbnVtcyBmcm9tIFwiLi4vZW51bWVyYXRpb25zXCI7XG5pbXBvcnQgeyBCaWplY3Rpb25FbmNvZGVyIH0gZnJvbSAnLi4vdXRpbHMvYmlqZWN0aW9uLWVuY29kZXInO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJ3dpbnN0b24nO1xuaW1wb3J0IHsgSU93bmVkIH0gZnJvbSAnLi9vd25lZC5pbnRlcmZhY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElOb3RpZmljYXRpb24gZXh0ZW5kcyBJQmFzZU1vZGVsLCBJT3duZWQge1xuICAgIHR5cGU6IGVudW1zLk5vdGlmaWNhdGlvblR5cGVcbiAgICBidWNrZXQ/OiBJQnVja2V0IHwgc3RyaW5nLFxuICAgIGJ1Y2tldEl0ZW0/OiBJQnVja2V0SXRlbSB8IHN0cmluZyxcbiAgICBjcmVhdGVkQnk/OiBJVXNlciB8IHN0cmluZyxcbiAgICBub3RpZmllZEJ5PzogSVVzZXIgfCBzdHJpbmcsXG4gICAgaXNSZWFkPzogYm9vbGVhbjtcbiAgICByZWFkQXQ/OiBzdHJpbmc7XG4gICAgaXNBY3Rpb25hYmxlPzogYm9vbGVhbjtcbiAgICBpc0FjdGlvbkNvbXBsZXRlZD86IGJvb2xlYW47XG4gICAgaXNTeXN0ZW0/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElOb3RpZmljYXRpb25Eb2MgZXh0ZW5kcyBJTm90aWZpY2F0aW9uLCBJQmFzZU1vZGVsRG9jIHtcblxufVxuXG5leHBvcnQgY29uc3QgTm90aWZpY2F0aW9uU2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgYnVja2V0OiB7IHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVmOiAnYnVja2V0JyB9LFxuICAgIGJ1Y2tldEl0ZW06IHsgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6ICdidWNrZXRJdGVtJyB9LFxuICAgIC8vIFRoaXMgY291bGQgYmUgc3VwcGxpZXIsIGNvdXJpZXIsIHBhcnRpY3VsYXIgdGVhbSBtZW1iZXIsIG9yIHVzZXIuICBXZSdyZSBnb2luZyB0byBrZWVwIHRoaXMgZ2VuZXJpYyBmb3Igbm93LlxuICAgIHR5cGU6IHsgdHlwZTogTnVtYmVyLCBlbnVtOiBbZW51bXMuRW51bUhlbHBlci5nZXRWYWx1ZXNGcm9tRW51bShlbnVtcy5Ob3RpZmljYXRpb25UeXBlKV0gfSxcbiAgICBub3RpZmllZEJ5OiB7IHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVmOiAndXNlcicgfSxcbiAgICBjcmVhdGVkQnk6IHsgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6ICd1c2VyJyB9LFxuICAgIGlzUmVhZDogeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgIHJlYWRBdDogeyB0eXBlOiBTdHJpbmcgfSxcbiAgICBpc0FjdGlvbmFibGU6IHsgdHlwZTogQm9vbGVhbiB9LFxuICAgIGlzQWN0aW9uQ29tcGxldGVkOiB7IHR5cGU6IEJvb2xlYW4gfSxcbiAgICBpc1N5c3RlbTogeyB0eXBlOiBCb29sZWFuIH0sXG59LCB7IHRpbWVzdGFtcHM6IHRydWUgfSk7XG5cbi8vIFRoaXMgd2lsbCBjb21waWxlIHRoZSBzY2hlbWEgZm9yIHRoZSBvYmplY3QsIGFuZCBwbGFjZSBpdCBpbiB0aGlzIEluc3RhbmNlLlxuZXhwb3J0IGNvbnN0IE5vdGlmaWNhdGlvbiA9IG1vbmdvb3NlLm1vZGVsPElOb3RpZmljYXRpb25Eb2M+KCdub3RpZmljYXRpb24nLCBOb3RpZmljYXRpb25TY2hlbWEpOyAgIFxuIl19

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = require("mongoose");
const database_1 = require("../config/database/database");
const enums = require("../enumerations");
const BucketSchema = new mongoose_1.Schema({
    owners: [{
            _id: { auto: false },
            ownerId: { type: mongoose_1.Schema.Types.ObjectId },
            ownershipType: { type: Number, enum: [enums.EnumHelper.getValuesFromEnum(enums.OwnershipType)] },
        }],
    likedBy: [{ type: mongoose_1.Schema.Types.ObjectId, ref: 'user' }],
    comments: [new mongoose_1.Schema({
            commentBy: { type: mongoose_1.Schema.Types.ObjectId, ref: 'user' },
            comment: { type: String },
        })],
    images: [{
            order: { type: Number },
            isActive: { type: Boolean },
            variations: [{
                    type: { type: Number, enum: [enums.EnumHelper.getValuesFromEnum(enums.ImageType)] },
                    url: { type: String },
                    width: { type: Number },
                    height: { type: Number },
                    key: { type: String },
                }],
        }],
    name: { type: String },
    description: { type: String },
    bucketItems: [{ type: mongoose_1.Schema.Types.ObjectId, ref: 'bucket-item' }],
    type: { type: Number, enum: [enums.EnumHelper.getValuesFromEnum(enums.BucketType)] },
    href: { type: String }
}, { timestamps: true });
//If you do any pre save methods, and you use fat arrow syntax 'this' doesn't refer to the document.
BucketSchema.pre('save', function (next) {
    //If there's any validators, this field requires validation.
    next();
});
// This will compile the schema for the object, and place it in this Instance.
exports.Bucket = database_1.mongoose.model('bucket', BucketSchema);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZlYnJvd24vRG9jdW1lbnRzL2hha3Uvc2VydmVyL21vZGVscy9idWNrZXQuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQWtDO0FBQ2xDLDBEQUF1RDtBQUN2RCx5Q0FBeUM7QUFnQnpDLE1BQU0sWUFBWSxHQUFHLElBQUksaUJBQU0sQ0FBQztJQUM1QixNQUFNLEVBQUUsQ0FBQztZQUNMLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUU7WUFDcEIsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFFLGlCQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUN6QyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUU7U0FDbkcsQ0FBQztJQUNGLE9BQU8sRUFBRSxDQUFDLEVBQUMsSUFBSSxFQUFFLGlCQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFDLENBQUM7SUFDckQsUUFBUSxFQUFFLENBQUMsSUFBSSxpQkFBTSxDQUFDO1lBQ2xCLFNBQVMsRUFBRSxFQUFDLElBQUksRUFBRSxpQkFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBQztZQUNyRCxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFO1NBQzVCLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxDQUFDO1lBQ0wsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtZQUN2QixRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO1lBQzNCLFVBQVUsRUFBRSxDQUFDO29CQUNULElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRTtvQkFDbkYsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtvQkFDckIsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtvQkFDdkIsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtvQkFDeEIsR0FBRyxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQztpQkFDdEIsQ0FBQztTQUNMLENBQUM7SUFDRixJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFO0lBQ3RCLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7SUFDN0IsV0FBVyxFQUFFLENBQUMsRUFBQyxJQUFJLEVBQUUsaUJBQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUMsQ0FBQztJQUNoRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7SUFDcEYsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtDQUN6QixFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFFekIsb0dBQW9HO0FBQ3BHLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFVBQVUsSUFBSTtJQUNuQyw0REFBNEQ7SUFDNUQsSUFBSSxFQUFFLENBQUM7QUFDWCxDQUFDLENBQUMsQ0FBQztBQUVILDhFQUE4RTtBQUNqRSxRQUFBLE1BQU0sR0FBRyxtQkFBUSxDQUFDLEtBQUssQ0FBYSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMiLCJmaWxlIjoibW9kZWxzL2J1Y2tldC5pbnRlcmZhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2hlbWEgfSBmcm9tICdtb25nb29zZSc7XG5pbXBvcnQgeyBtb25nb29zZSB9IGZyb20gJy4uL2NvbmZpZy9kYXRhYmFzZS9kYXRhYmFzZSc7XG5pbXBvcnQgKiBhcyBlbnVtcyBmcm9tIFwiLi4vZW51bWVyYXRpb25zXCI7XG5pbXBvcnQgeyBJQmFzZU1vZGVsLCBJQmFzZU1vZGVsRG9jLCBJQnVja2V0SXRlbSwgSUNvbW1lbnRhYmxlLCBJSGFzSW1hZ2VzLCBJTGlrZWFibGUsIElPd25lZCwgSVRpbWVTdGFtcGVkIH0gZnJvbSBcIi4vaW5kZXhcIjtcblxuXG5leHBvcnQgaW50ZXJmYWNlIElCdWNrZXQgZXh0ZW5kcyBJQmFzZU1vZGVsLCBJTGlrZWFibGUsIElPd25lZCwgSVRpbWVTdGFtcGVkLCBJQ29tbWVudGFibGUsIElIYXNJbWFnZXMge1xuICAgIG5hbWU/OiBzdHJpbmcsXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmcsXG4gICAgYnVja2V0SXRlbXM/OiBJQnVja2V0SXRlbVtdIHwgc3RyaW5nW10sXG4gICAgdHlwZT86IGVudW1zLkJ1Y2tldFR5cGUsXG4gICAgaHJlZj86IHN0cmluZyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQnVja2V0RG9jIGV4dGVuZHMgSUJ1Y2tldCwgSUJhc2VNb2RlbERvYyB7XG5cbn1cblxuY29uc3QgQnVja2V0U2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgb3duZXJzOiBbe1xuICAgICAgICBfaWQ6IHsgYXV0bzogZmFsc2UgfSxcbiAgICAgICAgb3duZXJJZDogIHsgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkIH0sXG4gICAgICAgIG93bmVyc2hpcFR5cGU6IHsgdHlwZTogTnVtYmVyLCBlbnVtOiBbZW51bXMuRW51bUhlbHBlci5nZXRWYWx1ZXNGcm9tRW51bShlbnVtcy5Pd25lcnNoaXBUeXBlKV0gfSxcbiAgICB9XSxcbiAgICBsaWtlZEJ5OiBbe3R5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVmOiAndXNlcid9XSxcbiAgICBjb21tZW50czogW25ldyBTY2hlbWEoe1xuICAgICAgICBjb21tZW50Qnk6IHt0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogJ3VzZXInfSxcbiAgICAgICAgY29tbWVudDogeyB0eXBlOiBTdHJpbmcgfSxcbiAgICB9KV0sXG4gICAgaW1hZ2VzOiBbe1xuICAgICAgICBvcmRlcjogeyB0eXBlOiBOdW1iZXIgfSxcbiAgICAgICAgaXNBY3RpdmU6IHsgdHlwZTogQm9vbGVhbiB9LFxuICAgICAgICB2YXJpYXRpb25zOiBbe1xuICAgICAgICAgICAgdHlwZTogeyB0eXBlOiBOdW1iZXIsIGVudW06IFtlbnVtcy5FbnVtSGVscGVyLmdldFZhbHVlc0Zyb21FbnVtKGVudW1zLkltYWdlVHlwZSldIH0sXG4gICAgICAgICAgICB1cmw6IHsgdHlwZTogU3RyaW5nIH0sXG4gICAgICAgICAgICB3aWR0aDogeyB0eXBlOiBOdW1iZXIgfSxcbiAgICAgICAgICAgIGhlaWdodDogeyB0eXBlOiBOdW1iZXIgfSxcbiAgICAgICAgICAgIGtleToge3R5cGU6IFN0cmluZ30sXG4gICAgICAgIH1dLFxuICAgIH1dLFxuICAgIG5hbWU6IHsgdHlwZTogU3RyaW5nIH0sXG4gICAgZGVzY3JpcHRpb246IHsgdHlwZTogU3RyaW5nIH0sXG4gICAgYnVja2V0SXRlbXM6IFt7dHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6ICdidWNrZXQtaXRlbSd9XSxcbiAgICB0eXBlOiB7IHR5cGU6IE51bWJlciwgZW51bTogW2VudW1zLkVudW1IZWxwZXIuZ2V0VmFsdWVzRnJvbUVudW0oZW51bXMuQnVja2V0VHlwZSldIH0sXG4gICAgaHJlZjogeyB0eXBlOiBTdHJpbmcgfVxufSwgeyB0aW1lc3RhbXBzOiB0cnVlIH0pO1xuXG4vL0lmIHlvdSBkbyBhbnkgcHJlIHNhdmUgbWV0aG9kcywgYW5kIHlvdSB1c2UgZmF0IGFycm93IHN5bnRheCAndGhpcycgZG9lc24ndCByZWZlciB0byB0aGUgZG9jdW1lbnQuXG5CdWNrZXRTY2hlbWEucHJlKCdzYXZlJywgZnVuY3Rpb24gKG5leHQpIHtcbiAgICAvL0lmIHRoZXJlJ3MgYW55IHZhbGlkYXRvcnMsIHRoaXMgZmllbGQgcmVxdWlyZXMgdmFsaWRhdGlvbi5cbiAgICBuZXh0KCk7XG59KTtcblxuLy8gVGhpcyB3aWxsIGNvbXBpbGUgdGhlIHNjaGVtYSBmb3IgdGhlIG9iamVjdCwgYW5kIHBsYWNlIGl0IGluIHRoaXMgSW5zdGFuY2UuXG5leHBvcnQgY29uc3QgQnVja2V0ID0gbW9uZ29vc2UubW9kZWw8SUJ1Y2tldERvYz4oJ2J1Y2tldCcsIEJ1Y2tldFNjaGVtYSk7Il19

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const database_1 = require("../config/database/database");
const mongoose_1 = require("mongoose");
const enums = require("../enumerations");
const UserSchema = new mongoose_1.Schema({
    owners: [{
            _id: { auto: false },
            ownerId: { type: mongoose_1.Schema.Types.ObjectId },
            ownershipType: { type: Number, enum: [enums.EnumHelper.getValuesFromEnum(enums.OwnershipType)] },
        }],
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    email: { type: String },
    password: { type: String, required: false, select: false },
    isTokenExpired: { type: Boolean, required: true, default: false },
    isEmailVerified: { type: Boolean, required: true, default: false },
    roles: [{ type: String }],
    href: { type: String },
    isActive: { type: Boolean, required: true, default: true },
    lastLoginStrategy: { type: Number, enum: [enums.EnumHelper.getValuesFromEnum(enums.LoginStrategy)] },
    facebookAuth: {
        id: { type: String },
        token: { type: String },
        name: { type: String }
    },
    twitterAuth: {
        id: { type: String },
        token: { type: String },
        displayName: { type: String },
        username: { type: String }
    },
    googleAuth: {
        id: { type: String },
        token: { type: String },
        name: { type: String }
    },
    instagramAuth: {
        id: { type: String },
        token: { type: String },
        name: { type: String },
        username: { type: String }
    }
}, { timestamps: true });
//If you do any pre save methods, and you use fat arrow syntax 'this' doesn't refer to the document.
UserSchema.pre('save', function (next) {
    //If there's any validators, this field requires validation.
    next();
});
// This will compile the schema for the object, and place it in this Instance.
exports.User = database_1.mongoose.model('user', UserSchema);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZlYnJvd24vRG9jdW1lbnRzL2hha3Uvc2VydmVyL21vZGVscy91c2VyLmludGVyZmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBEQUF1RDtBQUN2RCx1Q0FBMEQ7QUFFMUQseUNBQXlDO0FBNkN6QyxNQUFNLFVBQVUsR0FBRyxJQUFJLGlCQUFNLENBQUM7SUFDMUIsTUFBTSxFQUFFLENBQUM7WUFDTCxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFO1lBQ3BCLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRSxpQkFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDekMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFO1NBQ25HLENBQUM7SUFDRixTQUFTLEVBQUUsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUM7SUFDMUMsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFDO0lBQ3pDLEtBQUssRUFBRSxFQUFDLElBQUksRUFBQyxNQUFNLEVBQUM7SUFDcEIsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUM7SUFDeEQsY0FBYyxFQUFFLEVBQUMsSUFBSSxFQUFHLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUM7SUFDaEUsZUFBZSxFQUFFLEVBQUMsSUFBSSxFQUFHLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUM7SUFDakUsS0FBSyxFQUFFLENBQUMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUM7SUFDdkIsSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQztJQUNuQixRQUFRLEVBQUUsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQztJQUN4RCxpQkFBaUIsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRTtJQUNwRyxZQUFZLEVBQVc7UUFDbkIsRUFBRSxFQUFhLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQztRQUM1QixLQUFLLEVBQVUsRUFBQyxJQUFJLEVBQUMsTUFBTSxFQUFDO1FBQzVCLElBQUksRUFBVyxFQUFDLElBQUksRUFBQyxNQUFNLEVBQUM7S0FDL0I7SUFDRCxXQUFXLEVBQVk7UUFDbkIsRUFBRSxFQUFhLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQztRQUM1QixLQUFLLEVBQVUsRUFBQyxJQUFJLEVBQUMsTUFBTSxFQUFDO1FBQzVCLFdBQVcsRUFBSSxFQUFDLElBQUksRUFBQyxNQUFNLEVBQUM7UUFDNUIsUUFBUSxFQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQztLQUMvQjtJQUNELFVBQVUsRUFBYTtRQUNuQixFQUFFLEVBQWEsRUFBQyxJQUFJLEVBQUMsTUFBTSxFQUFDO1FBQzVCLEtBQUssRUFBVSxFQUFDLElBQUksRUFBQyxNQUFNLEVBQUM7UUFDNUIsSUFBSSxFQUFXLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQztLQUMvQjtJQUNELGFBQWEsRUFBYTtRQUN0QixFQUFFLEVBQWEsRUFBQyxJQUFJLEVBQUMsTUFBTSxFQUFDO1FBQzVCLEtBQUssRUFBVSxFQUFDLElBQUksRUFBQyxNQUFNLEVBQUM7UUFDNUIsSUFBSSxFQUFXLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQztRQUM1QixRQUFRLEVBQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxFQUFDO0tBQy9CO0NBQ0osRUFBQyxFQUFDLFVBQVUsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO0FBRXJCLG9HQUFvRztBQUNwRyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBQyxVQUFTLElBQUk7SUFDL0IsNERBQTREO0lBQzVELElBQUksRUFBRSxDQUFDO0FBQ1gsQ0FBQyxDQUFDLENBQUM7QUFFSCw4RUFBOEU7QUFDakUsUUFBQSxJQUFJLEdBQUcsbUJBQVEsQ0FBQyxLQUFLLENBQVcsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDIiwiZmlsZSI6Im1vZGVscy91c2VyLmludGVyZmFjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1vbmdvb3NlIH0gZnJvbSAnLi4vY29uZmlnL2RhdGFiYXNlL2RhdGFiYXNlJztcbmltcG9ydCB7IFNjaGVtYSwgTW9kZWwsIERvY3VtZW50LCBtb2RlbCB9IGZyb20gJ21vbmdvb3NlJztcbmltcG9ydCB7IElCYXNlTW9kZWwsIElCYXNlTW9kZWxEb2MsIElPd25lZCwgSVRpbWVTdGFtcGVkIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCAqIGFzIGVudW1zIGZyb20gJy4uL2VudW1lcmF0aW9ucyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVVzZXIgZXh0ZW5kcyBJQmFzZU1vZGVsLCBJT3duZWQsIElUaW1lU3RhbXBlZCB7XG4gICAgZmlyc3ROYW1lPzogc3RyaW5nLFxuICAgIGxhc3ROYW1lPzogc3RyaW5nLFxuICAgIHBhc3N3b3JkPzogc3RyaW5nO1xuICAgIGVtYWlsPzogc3RyaW5nO1xuICAgIGhyZWY/OiBzdHJpbmc7XG4gICAgcm9sZXM/OiBzdHJpbmdbXTtcbiAgICBsYXN0TG9naW5TdHJhdGVneT86IGVudW1zLkxvZ2luU3RyYXRlZ3lcbiAgICAvLyBUaGlzIHdpbGwgYmUgc2V0IHRvIHRydWUgd2hlbmV2ZXIgYSB1c2VyIGNoYW5nZXMgdGhlaXIgcGFzc3dvcmQgLyBvciB3ZSByZXF1aXJlIHRoZW0gdG8gbG9naW4gYWdhaW5cbiAgICAvLyBUaGlzIGlzIHVzZWQgYnkgdGhlIGF1dGhlbnRpY2F0aW9uIGNvbnRyb2xsZXIgdG8gcmV2b2tlIHRoZSByZW5ld2FsIG9mIGEgdG9rZW4uICBcbiAgICBpc1Rva2VuRXhwaXJlZD86IGJvb2xlYW47IFxuICAgIGlzRW1haWxWZXJpZmllZD86IGJvb2xlYW47XG4gICAgaXNBY3RpdmU/OiBib29sZWFuO1xuICAgIGNyZWF0ZWRBdD86IERhdGU7IC8vQXV0b21hdGljYWxseSBjcmVhdGVkIGJ5IG1vbmdvb3NlLlxuICAgIG1vZGlmaWVkQXQ/OiBEYXRlOyAvL0F1dG9tYXRpY2FsbHkgY3JlYXRlZCBieSBtb25nb29zZS5cbiAgICBmYWNlYm9va0F1dGg/OiB7XG4gICAgICAgIGlkPzogc3RyaW5nLFxuICAgICAgICB0b2tlbj86IHN0cmluZyxcbiAgICAgICAgbmFtZT86IHN0cmluZyxcbiAgICB9XG4gICAgdHdpdHRlckF1dGg/OntcbiAgICAgICAgaWQ/ICAgICAgICAgICA6IHN0cmluZyxcbiAgICAgICAgdG9rZW4/ICAgICAgICA6IHN0cmluZyxcbiAgICAgICAgZGlzcGxheU5hbWU/ICA6IHN0cmluZyxcbiAgICAgICAgdXNlcm5hbWU/ICAgICA6IHN0cmluZ1xuICAgIH1cbiAgICBnb29nbGVBdXRoPzp7XG4gICAgICAgIGlkPyAgICAgICAgICAgOiBzdHJpbmcsXG4gICAgICAgIHRva2VuPyAgICAgICAgOiBzdHJpbmcsXG4gICAgICAgIG5hbWU/ICAgICAgICAgOiBzdHJpbmdcbiAgICB9XG4gICAgaW5zdGFncmFtQXV0aD86e1xuICAgICAgICBpZCAgICAgICAgICAgOiBzdHJpbmcsXG4gICAgICAgIHRva2VuPyAgICAgICAgOiBzdHJpbmcsXG4gICAgICAgIG5hbWU/ICAgICAgICAgOiBzdHJpbmcsXG4gICAgICAgIHVzZXJuYW1lPyAgICAgOiBzdHJpbmdcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVVzZXJEb2MgZXh0ZW5kcyBJVXNlciwgSUJhc2VNb2RlbERvYyB7XG5cbn1cblxuY29uc3QgVXNlclNjaGVtYSA9IG5ldyBTY2hlbWEoe1xuICAgIG93bmVyczogW3tcbiAgICAgICAgX2lkOiB7IGF1dG86IGZhbHNlIH0sXG4gICAgICAgIG93bmVySWQ6ICB7IHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCB9LFxuICAgICAgICBvd25lcnNoaXBUeXBlOiB7IHR5cGU6IE51bWJlciwgZW51bTogW2VudW1zLkVudW1IZWxwZXIuZ2V0VmFsdWVzRnJvbUVudW0oZW51bXMuT3duZXJzaGlwVHlwZSldIH0sXG4gICAgfV0sXG4gICAgZmlyc3ROYW1lOiB7dHlwZTogU3RyaW5nLCByZXF1aXJlZDogZmFsc2V9LFxuICAgIGxhc3ROYW1lOiB7dHlwZTogU3RyaW5nLCByZXF1aXJlZDogZmFsc2V9LFxuICAgIGVtYWlsOiB7dHlwZTpTdHJpbmd9LFxuICAgIHBhc3N3b3JkOiB7dHlwZTogU3RyaW5nLCByZXF1aXJlZDogZmFsc2UsIHNlbGVjdDogZmFsc2V9LFxuICAgIGlzVG9rZW5FeHBpcmVkOiB7dHlwZSA6IEJvb2xlYW4sIHJlcXVpcmVkOiB0cnVlLCBkZWZhdWx0OiBmYWxzZX0sXG4gICAgaXNFbWFpbFZlcmlmaWVkOiB7dHlwZSA6IEJvb2xlYW4sIHJlcXVpcmVkOiB0cnVlLCBkZWZhdWx0OiBmYWxzZX0sXG4gICAgcm9sZXM6IFt7dHlwZTogU3RyaW5nfV0sXG4gICAgaHJlZjoge3R5cGU6U3RyaW5nfSxcbiAgICBpc0FjdGl2ZToge3R5cGU6IEJvb2xlYW4sIHJlcXVpcmVkOiB0cnVlLCBkZWZhdWx0OiB0cnVlfSxcbiAgICBsYXN0TG9naW5TdHJhdGVneTogeyB0eXBlOiBOdW1iZXIsIGVudW06IFtlbnVtcy5FbnVtSGVscGVyLmdldFZhbHVlc0Zyb21FbnVtKGVudW1zLkxvZ2luU3RyYXRlZ3kpXSB9LFxuICAgIGZhY2Vib29rQXV0aCAgICAgICAgIDoge1xuICAgICAgICBpZCAgICAgICAgICAgOiB7dHlwZTpTdHJpbmd9LFxuICAgICAgICB0b2tlbiAgICAgICAgOiB7dHlwZTpTdHJpbmd9LFxuICAgICAgICBuYW1lICAgICAgICAgOiB7dHlwZTpTdHJpbmd9XG4gICAgfSxcbiAgICB0d2l0dGVyQXV0aCAgICAgICAgICA6IHtcbiAgICAgICAgaWQgICAgICAgICAgIDoge3R5cGU6U3RyaW5nfSxcbiAgICAgICAgdG9rZW4gICAgICAgIDoge3R5cGU6U3RyaW5nfSxcbiAgICAgICAgZGlzcGxheU5hbWUgIDoge3R5cGU6U3RyaW5nfSxcbiAgICAgICAgdXNlcm5hbWUgICAgIDoge3R5cGU6U3RyaW5nfVxuICAgIH0sXG4gICAgZ29vZ2xlQXV0aCAgICAgICAgICAgOiB7XG4gICAgICAgIGlkICAgICAgICAgICA6IHt0eXBlOlN0cmluZ30sXG4gICAgICAgIHRva2VuICAgICAgICA6IHt0eXBlOlN0cmluZ30sXG4gICAgICAgIG5hbWUgICAgICAgICA6IHt0eXBlOlN0cmluZ31cbiAgICB9LFxuICAgIGluc3RhZ3JhbUF1dGggICAgICAgICAgIDoge1xuICAgICAgICBpZCAgICAgICAgICAgOiB7dHlwZTpTdHJpbmd9LFxuICAgICAgICB0b2tlbiAgICAgICAgOiB7dHlwZTpTdHJpbmd9LFxuICAgICAgICBuYW1lICAgICAgICAgOiB7dHlwZTpTdHJpbmd9LFxuICAgICAgICB1c2VybmFtZSAgICAgOiB7dHlwZTpTdHJpbmd9XG4gICAgfVxufSx7dGltZXN0YW1wczp0cnVlfSk7XG5cbi8vSWYgeW91IGRvIGFueSBwcmUgc2F2ZSBtZXRob2RzLCBhbmQgeW91IHVzZSBmYXQgYXJyb3cgc3ludGF4ICd0aGlzJyBkb2Vzbid0IHJlZmVyIHRvIHRoZSBkb2N1bWVudC5cblVzZXJTY2hlbWEucHJlKCdzYXZlJyxmdW5jdGlvbihuZXh0KXtcbiAgICAvL0lmIHRoZXJlJ3MgYW55IHZhbGlkYXRvcnMsIHRoaXMgZmllbGQgcmVxdWlyZXMgdmFsaWRhdGlvbi5cbiAgICBuZXh0KCk7XG59KTtcblxuLy8gVGhpcyB3aWxsIGNvbXBpbGUgdGhlIHNjaGVtYSBmb3IgdGhlIG9iamVjdCwgYW5kIHBsYWNlIGl0IGluIHRoaXMgSW5zdGFuY2UuXG5leHBvcnQgY29uc3QgVXNlciA9IG1vbmdvb3NlLm1vZGVsPElVc2VyRG9jPigndXNlcicsIFVzZXJTY2hlbWEpOyJdfQ==

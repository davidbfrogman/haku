"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const database_1 = require("../config/database/database");
const mongoose_1 = require("mongoose");
const enums = require("../enumerations");
const UserSchema = new mongoose_1.Schema({
    owners: [{
            _id: { auto: false },
            ownerId: { type: mongoose_1.Schema.Types.ObjectId },
            ownershipType: { type: Number, enum: [enums.EnumHelper.getValuesFromEnum(enums.OwnershipType)] },
        }],
    firstName: { type: String, required: false },
    lastName: { type: String, required: false },
    email: { type: String },
    password: { type: String, required: false, select: false },
    isTokenExpired: { type: Boolean, required: true, default: false },
    isEmailVerified: { type: Boolean, required: true, default: false },
    roles: [{ type: String }],
    href: { type: String },
    isActive: { type: Boolean, required: true, default: true },
    lastLoginStrategy: { type: Number, enum: [enums.EnumHelper.getValuesFromEnum(enums.LoginStrategy)] },
}, { timestamps: true });
//If you do any pre save methods, and you use fat arrow syntax 'this' doesn't refer to the document.
UserSchema.pre('save', function (next) {
    //If there's any validators, this field requires validation.
    next();
});
// This will compile the schema for the object, and place it in this Instance.
exports.User = database_1.mongoose.model('user', UserSchema);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZlYnJvd24vRG9jdW1lbnRzL2hha3Uvc2VydmVyL21vZGVscy91c2VyLmludGVyZmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBEQUF1RDtBQUN2RCx1Q0FBMEQ7QUFFMUQseUNBQXlDO0FBdUJ6QyxNQUFNLFVBQVUsR0FBRyxJQUFJLGlCQUFNLENBQUM7SUFDMUIsTUFBTSxFQUFFLENBQUM7WUFDTCxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFO1lBQ3BCLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRSxpQkFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDekMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFO1NBQ25HLENBQUM7SUFDRixTQUFTLEVBQUUsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUM7SUFDMUMsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFDO0lBQ3pDLEtBQUssRUFBRSxFQUFDLElBQUksRUFBQyxNQUFNLEVBQUM7SUFDcEIsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUM7SUFDeEQsY0FBYyxFQUFFLEVBQUMsSUFBSSxFQUFHLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUM7SUFDaEUsZUFBZSxFQUFFLEVBQUMsSUFBSSxFQUFHLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUM7SUFDakUsS0FBSyxFQUFFLENBQUMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUM7SUFDdkIsSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQztJQUNuQixRQUFRLEVBQUUsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQztJQUN4RCxpQkFBaUIsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRTtDQUN2RyxFQUFDLEVBQUMsVUFBVSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUM7QUFFckIsb0dBQW9HO0FBQ3BHLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFDLFVBQVMsSUFBSTtJQUMvQiw0REFBNEQ7SUFDNUQsSUFBSSxFQUFFLENBQUM7QUFDWCxDQUFDLENBQUMsQ0FBQztBQUVILDhFQUE4RTtBQUNqRSxRQUFBLElBQUksR0FBRyxtQkFBUSxDQUFDLEtBQUssQ0FBVyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUMiLCJmaWxlIjoibW9kZWxzL3VzZXIuaW50ZXJmYWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW9uZ29vc2UgfSBmcm9tICcuLi9jb25maWcvZGF0YWJhc2UvZGF0YWJhc2UnO1xuaW1wb3J0IHsgU2NoZW1hLCBNb2RlbCwgRG9jdW1lbnQsIG1vZGVsIH0gZnJvbSAnbW9uZ29vc2UnO1xuaW1wb3J0IHsgSUJhc2VNb2RlbCwgSUJhc2VNb2RlbERvYywgSU93bmVkLCBJVGltZVN0YW1wZWQgfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0ICogYXMgZW51bXMgZnJvbSAnLi4vZW51bWVyYXRpb25zJztcblxuZXhwb3J0IGludGVyZmFjZSBJVXNlciBleHRlbmRzIElCYXNlTW9kZWwsIElPd25lZCwgSVRpbWVTdGFtcGVkIHtcbiAgICBmaXJzdE5hbWU/OiBzdHJpbmcsXG4gICAgbGFzdE5hbWU/OiBzdHJpbmcsXG4gICAgcGFzc3dvcmQ/OiBzdHJpbmc7XG4gICAgZW1haWw/OiBzdHJpbmc7XG4gICAgaHJlZj86IHN0cmluZztcbiAgICByb2xlcz86IHN0cmluZ1tdO1xuICAgIGxhc3RMb2dpblN0cmF0ZWd5PzogZW51bXMuTG9naW5TdHJhdGVneVxuICAgIC8vIFRoaXMgd2lsbCBiZSBzZXQgdG8gdHJ1ZSB3aGVuZXZlciBhIHVzZXIgY2hhbmdlcyB0aGVpciBwYXNzd29yZCAvIG9yIHdlIHJlcXVpcmUgdGhlbSB0byBsb2dpbiBhZ2FpblxuICAgIC8vIFRoaXMgaXMgdXNlZCBieSB0aGUgYXV0aGVudGljYXRpb24gY29udHJvbGxlciB0byByZXZva2UgdGhlIHJlbmV3YWwgb2YgYSB0b2tlbi4gIFxuICAgIGlzVG9rZW5FeHBpcmVkPzogYm9vbGVhbjsgXG4gICAgaXNFbWFpbFZlcmlmaWVkPzogYm9vbGVhbjtcbiAgICBpc0FjdGl2ZT86IGJvb2xlYW47XG4gICAgY3JlYXRlZEF0PzogRGF0ZTsgLy9BdXRvbWF0aWNhbGx5IGNyZWF0ZWQgYnkgbW9uZ29vc2UuXG4gICAgbW9kaWZpZWRBdD86IERhdGU7IC8vQXV0b21hdGljYWxseSBjcmVhdGVkIGJ5IG1vbmdvb3NlLlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElVc2VyRG9jIGV4dGVuZHMgSVVzZXIsIElCYXNlTW9kZWxEb2Mge1xuXG59XG5cbmNvbnN0IFVzZXJTY2hlbWEgPSBuZXcgU2NoZW1hKHtcbiAgICBvd25lcnM6IFt7XG4gICAgICAgIF9pZDogeyBhdXRvOiBmYWxzZSB9LFxuICAgICAgICBvd25lcklkOiAgeyB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQgfSxcbiAgICAgICAgb3duZXJzaGlwVHlwZTogeyB0eXBlOiBOdW1iZXIsIGVudW06IFtlbnVtcy5FbnVtSGVscGVyLmdldFZhbHVlc0Zyb21FbnVtKGVudW1zLk93bmVyc2hpcFR5cGUpXSB9LFxuICAgIH1dLFxuICAgIGZpcnN0TmFtZToge3R5cGU6IFN0cmluZywgcmVxdWlyZWQ6IGZhbHNlfSxcbiAgICBsYXN0TmFtZToge3R5cGU6IFN0cmluZywgcmVxdWlyZWQ6IGZhbHNlfSxcbiAgICBlbWFpbDoge3R5cGU6U3RyaW5nfSxcbiAgICBwYXNzd29yZDoge3R5cGU6IFN0cmluZywgcmVxdWlyZWQ6IGZhbHNlLCBzZWxlY3Q6IGZhbHNlfSxcbiAgICBpc1Rva2VuRXhwaXJlZDoge3R5cGUgOiBCb29sZWFuLCByZXF1aXJlZDogdHJ1ZSwgZGVmYXVsdDogZmFsc2V9LFxuICAgIGlzRW1haWxWZXJpZmllZDoge3R5cGUgOiBCb29sZWFuLCByZXF1aXJlZDogdHJ1ZSwgZGVmYXVsdDogZmFsc2V9LFxuICAgIHJvbGVzOiBbe3R5cGU6IFN0cmluZ31dLFxuICAgIGhyZWY6IHt0eXBlOlN0cmluZ30sXG4gICAgaXNBY3RpdmU6IHt0eXBlOiBCb29sZWFuLCByZXF1aXJlZDogdHJ1ZSwgZGVmYXVsdDogdHJ1ZX0sXG4gICAgbGFzdExvZ2luU3RyYXRlZ3k6IHsgdHlwZTogTnVtYmVyLCBlbnVtOiBbZW51bXMuRW51bUhlbHBlci5nZXRWYWx1ZXNGcm9tRW51bShlbnVtcy5Mb2dpblN0cmF0ZWd5KV0gfSxcbn0se3RpbWVzdGFtcHM6dHJ1ZX0pO1xuXG4vL0lmIHlvdSBkbyBhbnkgcHJlIHNhdmUgbWV0aG9kcywgYW5kIHlvdSB1c2UgZmF0IGFycm93IHN5bnRheCAndGhpcycgZG9lc24ndCByZWZlciB0byB0aGUgZG9jdW1lbnQuXG5Vc2VyU2NoZW1hLnByZSgnc2F2ZScsZnVuY3Rpb24obmV4dCl7XG4gICAgLy9JZiB0aGVyZSdzIGFueSB2YWxpZGF0b3JzLCB0aGlzIGZpZWxkIHJlcXVpcmVzIHZhbGlkYXRpb24uXG4gICAgbmV4dCgpO1xufSk7XG5cbi8vIFRoaXMgd2lsbCBjb21waWxlIHRoZSBzY2hlbWEgZm9yIHRoZSBvYmplY3QsIGFuZCBwbGFjZSBpdCBpbiB0aGlzIEluc3RhbmNlLlxuZXhwb3J0IGNvbnN0IFVzZXIgPSBtb25nb29zZS5tb2RlbDxJVXNlckRvYz4oJ3VzZXInLCBVc2VyU2NoZW1hKTsiXX0=

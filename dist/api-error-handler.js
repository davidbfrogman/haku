"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log = require("winston");
const config_1 = require("./config/config");
class ApiErrorHandler {
    static sendError(message, status, response, errorCode, exception) {
        log.error(`API Expected Error: ${message}, errorcode:${errorCode}, status: ${status} exception: ${exception}`);
        response.status(status).json({
            message: message,
            status: status,
            errorCode: errorCode,
            exception: exception
        });
    }
    static sendAuthFailure(response, status, description) {
        return response.status(status).json({
            message: 'Authentication Failed',
            description: description
        });
    }
    static HandleApiError(error, request, response, next) {
        if (error.stack) {
            log.error(JSON.stringify(error) + '  Call Stack: ' + JSON.stringify(error.stack));
        }
        else {
            log.error(JSON.stringify(error));
        }
        // Set the response status code on the response in the case of error.
        response.statusCode = error.status || 500;
        //If there was an authentication errror.
        if (error.name == 'JWTExpressError') {
            response.status(401);
        }
        response.json({
            message: error.message || 'Server Error',
            status: error.status || 500,
            URL: request.url,
            method: request.method,
            stack: config_1.Config.active.get('returnCallStackOnError') ? error.stack : '',
            requestBody: request.body
        });
    }
}
exports.ApiErrorHandler = ApiErrorHandler;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZlYnJvd24vRG9jdW1lbnRzL2x5cmEvYWxlbWJpYy53ZWIvc2VydmVyL2FwaS1lcnJvci1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsK0JBQWdDO0FBQ2hDLDRDQUF5QztBQUV6QztJQUVXLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBZSxFQUFFLE1BQWMsRUFBRSxRQUFrQixFQUFFLFNBQWtCLEVBQUUsU0FBZTtRQUM1RyxHQUFHLENBQUMsS0FBSyxDQUFDLHVCQUF1QixPQUFPLGVBQWUsU0FBUyxhQUFhLE1BQU0sZUFBZSxTQUFTLEVBQUUsQ0FBQyxDQUFBO1FBQzlHLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3pCLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLE1BQU0sRUFBRSxNQUFNO1lBQ2QsU0FBUyxFQUFFLFNBQVM7WUFDcEIsU0FBUyxFQUFFLFNBQVM7U0FDdkIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBa0IsRUFBRSxNQUFjLEVBQUUsV0FBbUI7UUFDakYsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2hDLE9BQU8sRUFBRSx1QkFBdUI7WUFDaEMsV0FBVyxFQUFFLFdBQVc7U0FDM0IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBaUMsRUFBRSxPQUFnQixFQUFFLFFBQWtCLEVBQUUsSUFBa0I7UUFDcEgsRUFBRSxDQUFBLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUM7WUFDWixHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN0RixDQUFDO1FBQ0QsSUFBSSxDQUFBLENBQUM7WUFDRCxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNyQyxDQUFDO1FBRUQscUVBQXFFO1FBQ3JFLFFBQVEsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUM7UUFFMUMsd0NBQXdDO1FBQ3hDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsQ0FBQztRQUNELFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDVixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sSUFBSSxjQUFjO1lBQ3hDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxJQUFJLEdBQUc7WUFDM0IsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHO1lBQ2hCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtZQUN0QixLQUFLLEVBQUUsZUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNyRSxXQUFXLEVBQUUsT0FBTyxDQUFDLElBQUk7U0FDNUIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBM0NELDBDQTJDQyIsImZpbGUiOiJhcGktZXJyb3ItaGFuZGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRGdW5jdGlvbiwgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBsb2cgPSByZXF1aXJlKCd3aW5zdG9uJyk7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuL2NvbmZpZy9jb25maWcnO1xuXG5leHBvcnQgY2xhc3MgQXBpRXJyb3JIYW5kbGVyIHtcblxuICAgIHB1YmxpYyBzdGF0aWMgc2VuZEVycm9yKG1lc3NhZ2U6IHN0cmluZywgc3RhdHVzOiBudW1iZXIsIHJlc3BvbnNlOiBSZXNwb25zZSwgZXJyb3JDb2RlPzogc3RyaW5nLCBleGNlcHRpb24/OiBhbnkpe1xuICAgICAgICBsb2cuZXJyb3IoYEFQSSBFeHBlY3RlZCBFcnJvcjogJHttZXNzYWdlfSwgZXJyb3Jjb2RlOiR7ZXJyb3JDb2RlfSwgc3RhdHVzOiAke3N0YXR1c30gZXhjZXB0aW9uOiAke2V4Y2VwdGlvbn1gKVxuICAgICAgICByZXNwb25zZS5zdGF0dXMoc3RhdHVzKS5qc29uKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICAgIGVycm9yQ29kZTogZXJyb3JDb2RlLFxuICAgICAgICAgICAgZXhjZXB0aW9uOiBleGNlcHRpb25cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBzdGF0aWMgc2VuZEF1dGhGYWlsdXJlKHJlc3BvbnNlOiBSZXNwb25zZSwgc3RhdHVzOiBudW1iZXIsIGRlc2NyaXB0aW9uOiBzdHJpbmcpOiBSZXNwb25zZSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoc3RhdHVzKS5qc29uKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiBGYWlsZWQnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgSGFuZGxlQXBpRXJyb3IoZXJyb3I6IEVycm9yICYgeyBzdGF0dXM6IG51bWJlciB9LCByZXF1ZXN0OiBSZXF1ZXN0LCByZXNwb25zZTogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xuICAgICAgICBpZihlcnJvci5zdGFjayl7XG4gICAgICAgICAgICBsb2cuZXJyb3IoSlNPTi5zdHJpbmdpZnkoZXJyb3IpICsgJyAgQ2FsbCBTdGFjazogJyArIEpTT04uc3RyaW5naWZ5KGVycm9yLnN0YWNrKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGxvZy5lcnJvcihKU09OLnN0cmluZ2lmeShlcnJvcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHRoZSByZXNwb25zZSBzdGF0dXMgY29kZSBvbiB0aGUgcmVzcG9uc2UgaW4gdGhlIGNhc2Ugb2YgZXJyb3IuXG4gICAgICAgIHJlc3BvbnNlLnN0YXR1c0NvZGUgPSBlcnJvci5zdGF0dXMgfHwgNTAwO1xuXG4gICAgICAgIC8vSWYgdGhlcmUgd2FzIGFuIGF1dGhlbnRpY2F0aW9uIGVycnJvci5cbiAgICAgICAgaWYgKGVycm9yLm5hbWUgPT0gJ0pXVEV4cHJlc3NFcnJvcicpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1cyg0MDEpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCAnU2VydmVyIEVycm9yJyxcbiAgICAgICAgICAgIHN0YXR1czogZXJyb3Iuc3RhdHVzIHx8IDUwMCxcbiAgICAgICAgICAgIFVSTDogcmVxdWVzdC51cmwsXG4gICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgICAgc3RhY2s6IENvbmZpZy5hY3RpdmUuZ2V0KCdyZXR1cm5DYWxsU3RhY2tPbkVycm9yJykgPyBlcnJvci5zdGFjayA6ICcnLFxuICAgICAgICAgICAgcmVxdWVzdEJvZHk6IHJlcXVlc3QuYm9keVxuICAgICAgICB9KTtcbiAgICB9XG59Il19

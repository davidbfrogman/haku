"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../constants");
class BaseRouter {
    getRouter() {
        this.router.all(`${this.resource}`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            // You can put logic here that needs to be run for every request.
            next();
        }))
            .get(`${this.resource}`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            yield this.controller.list(request, response, next);
        }))
            .get(`${this.resource}${constants_1.CONST.ep.MINE}`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            yield this.controller.listByOwner(request, response, next);
        }))
            .post(`${this.resource}/query`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            yield this.controller.query(request, response, next);
        }))
            .get(`${this.resource}/blank`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            this.controller.blank(request, response, next);
        }))
            .get(`${this.resource}/utility`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            this.controller.utility(request, response, next);
        }))
            .get(`${this.resource}/count`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            yield this.controller.count(request, response, next);
        }))
            .delete(`${this.resource}/clear`, (request, response, next) => {
            this.controller.clear(request, response, next);
        })
            .get(`${this.resource}/:id`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            yield this.controller.single(request, response, next);
        }))
            .post(`${this.resource}`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            yield this.controller.create(request, response, next);
        }))
            .put(`${this.resource}/:id`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            yield this.controller.updateFull(request, response, next);
        }))
            .patch(`${this.resource}/:id`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            yield this.controller.updatePartial(request, response, next);
        }))
            .delete(`${this.resource}/:id`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            yield this.controller.destroy(request, response, next);
        }));
        return this.router;
    }
}
exports.BaseRouter = BaseRouter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const base_router_1 = require("./base/base.router");
const constants_1 = require("../constants");
const authentication_controller_1 = require("../controllers/authentication.controller");
const passport = require("passport");
const InstagramStrategy = require("passport-instagram");
const FacebookStrategy = require("passport-facebook");
const FacebookTokenStrategy = require("passport-facebook-token");
const config_1 = require("../config/config");
const enumerations_1 = require("../enumerations");
class AuthenticationRouter extends base_router_1.BaseRouter {
    constructor() {
        super();
        this.router = express_1.Router();
        this.controller = new authentication_controller_1.AuthenticationController();
        this.resource = constants_1.CONST.ep.AUTHENTICATE;
        this.initializeInstagramStrategy();
        this.initializeFacebookStrategy();
        this.initializeFacebookTokenStrategy();
    }
    initializeInstagramStrategy() {
        passport.use(new InstagramStrategy({
            clientID: config_1.Config.active.get('instagramClientId'),
            clientSecret: config_1.Config.active.get('instagramClientSecret'),
            callbackURL: `${config_1.Config.active.get('APILocation')}${constants_1.CONST.ep.API}${constants_1.CONST.ep.V1}${this.resource}${constants_1.CONST.ep.INSTAGRAM}${constants_1.CONST.ep.CALLBACK}`
        }, (accessToken, refreshToken, profile, done) => {
            // here what will come in is a profile.id
            // we need to have a controller method that will take the profile and do something with it. 
            this.controller.upsertSocialAuth(accessToken, refreshToken, profile, done, enumerations_1.LoginStrategy.Instagram, { instagramAuth: { id: profile.id } }, (profile) => {
                const user = { instagramAuth: { id: profile.id } };
                // most others will need to set the email here off the profile id.
                return user;
            });
        }));
    }
    initializeFacebookTokenStrategy() {
        passport.use(new FacebookTokenStrategy({
            clientID: config_1.Config.active.get('facebookClientId'),
            clientSecret: config_1.Config.active.get('facebookClientSecret'),
            profileFields: ['id', 'displayName', 'email',] //notice here I'm telling passport what fields I want back from facebook.
        }, (accessToken, refreshToken, profile, done) => {
            // here what will come in is a profile.id
            // we need to have a controller method that will take the profile and do something with it. 
            this.HandleFacebookStyleUpsert(accessToken, refreshToken, profile, done);
        }));
    }
    initializeFacebookStrategy() {
        passport.use(new FacebookStrategy.Strategy({
            clientID: config_1.Config.active.get('facebookClientId'),
            clientSecret: config_1.Config.active.get('facebookClientSecret'),
            callbackURL: `${config_1.Config.active.get('APILocation')}${constants_1.CONST.ep.API}${constants_1.CONST.ep.V1}${this.resource}${constants_1.CONST.ep.FACEBOOK}${constants_1.CONST.ep.CALLBACK}`,
            profileFields: ['id', 'displayName', 'email'] //notice here I'm telling passport what fields I want back from facebook.
        }, (accessToken, refreshToken, profile, done) => {
            // here what will come in is a profile.id
            // we need to have a controller method that will take the profile and do something with it. 
            this.HandleFacebookStyleUpsert(accessToken, refreshToken, profile, done);
        }));
    }
    HandleFacebookStyleUpsert(accessToken, refreshToken, profile, done) {
        this.controller.upsertSocialAuth(accessToken, refreshToken, profile, done, enumerations_1.LoginStrategy.Facebook, { facebookAuth: { id: profile.id } }, (profile) => {
            const user = { facebookAuth: { id: profile.id } };
            if (profile.emails.length > 0) {
                user.email = profile.emails[0].value;
                user.isEmailVerified = true;
            }
            // most others will need to set the email here off the profile id.
            return user;
        });
    }
    getRestrictedRouter() {
        return this.router
            .post(`${this.resource}${constants_1.CONST.ep.FACEBOOK}${constants_1.CONST.ep.CB}`, passport.authenticate('facebook', { scope: ['email'], session: false }))
            .get(`${this.resource}${constants_1.CONST.ep.FACEBOOK}${constants_1.CONST.ep.CB}${constants_1.CONST.ep.CALLBACK}`, // this uses the facebook strategy for auth.
        (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            // Successful authentication, redirect home.
            yield this.controller.sendTokenResponse(request, response, next);
        }))
            .post(`${this.resource}${constants_1.CONST.ep.FACEBOOK}`, passport.authenticate('facebook-token', { scope: ['email'], session: false }), (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            // Successful authentication, redirect home.
            yield this.controller.sendTokenResponse(request, response, next);
        }))
            .post(`${this.resource}${constants_1.CONST.ep.INSTAGRAM}`, passport.authenticate('instagram'))
            .get(`${this.resource}${constants_1.CONST.ep.INSTAGRAM}${constants_1.CONST.ep.CALLBACK}`, // this gets hit in the callback.
        passport.authenticate('instagram', { failureRedirect: '/', session: false }), // this uses the instagram strategy for auth.
        (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            // Successful authentication, redirect home.
            yield this.controller.sendTokenResponse(request, response, next);
        }))
            .post(`${this.resource}${constants_1.CONST.ep.LOCAL}${constants_1.CONST.ep.LOGIN}`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            yield this.controller.authenticateLocal(request, response, next);
        }))
            .post(`${this.resource}${constants_1.CONST.ep.LOCAL}${constants_1.CONST.ep.REGISTER}`, (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            yield this.controller.register(request, response, next);
        }));
    }
}
exports.AuthenticationRouter = AuthenticationRouter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

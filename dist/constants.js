"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CONST = {
    ep: {
        API: '/api',
        V1: '/v1',
        MINE: '/mine',
        AUTHENTICATE: '/authenticate',
        LOCAL: '/local',
        FACEBOOK: '/facebook',
        CB: '/cb',
        TWITTER: '/twitter',
        GOOGLE: '/google',
        INSTAGRAM: '/instagram',
        USERS: '/users',
        ROLES: '/roles',
        BUCKETS: '/buckets',
        BUCKET_ITEMS: '/bucket-items',
        REGISTER: '/register',
        API_DOCS: '/api-docs',
        API_SWAGGER_DEF: '/swagger-definition',
        NOTIFICATIONS: '/notifications',
        IMAGES: '/images',
        LOGIN: '/login',
        CALLBACK: '/callback',
        REMOVE_REFERENCES: '/remove-references',
        EMAIL_VERIFICATIONS: '/email-verifications',
        PASSWORD_RESET: '/password-reset',
        PASSWORD_RESET_TOKENS: '/password-reset-tokens',
        VALIDATE_EMAIL: '/validate-email',
        PASSWORD_RESET_REQUEST: '/password-reset-request',
        INLINE_PASSWORD_CHANGE: '/update-password-inline',
        LIKES: '/likes',
        COMMENTS: '/comments',
        client: {},
        common: {
            QUERY: '/query'
        }
    },
    TOKEN_HEADER_KEY: "x-access-token",
    ADMIN_ROLE: 'admin',
    GUEST_ROLE: 'guest',
    USER_ROLE: 'user',
    MOMENT_DATE_FORMAT: 'YYYY-MM-DD h:mm:ss a Z',
    ALEMBIC_API_Q_BACKPLANE: 'alembic-api-q-backplane',
    REQUEST_TOKEN_LOCATION: 'api-decoded-token',
    SALT_ROUNDS: 10,
    errorCodes: {
        EMAIL_TAKEN: 'EmailAlreadyTaken',
        PASSWORD_FAILED_CHECKS: 'PasswordFailedChecks',
        EMAIL_VERIFICATION_EXPIRED: 'EmailVerificationHasExpired',
        PASSWORD_RESET_TOKEN_EXPIRED: 'PasswordResetTokenExpired',
    },
    testing: {
        USER_EMAIL: "integration.user.role@alembic.com",
        GUEST_EMAIl: "integration.guest.role@alembic.com",
        ORGANIZATION_NAME: "IntegrationTestOrganization",
        PUSH_TOKEN: 'fLJEsDMKn1M:APA91bE3Ins30n5DksYkZ7AS7m0x6oH9sSFUbP01Jrb7UyELrjo8obESU_IwJ9qHuxLYA5zxLqjszJwyw4MLojJUEUgEo7DROixo-NyXFtYPgkq_pgy-P1v5nkYiQYkn5SobZU7HPMCj',
    },
    IMAGE_UPLOAD_PATH: './img-uploads/',
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZlYnJvd24vRG9jdW1lbnRzL2x5cmEvYWxlbWJpYy53ZWIvc2VydmVyL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFhLFFBQUEsS0FBSyxHQUFHO0lBQ2pCLEVBQUUsRUFBRTtRQUNBLEdBQUcsRUFBRSxNQUFNO1FBQ1gsRUFBRSxFQUFFLEtBQUs7UUFDVCxJQUFJLEVBQUUsT0FBTztRQUNiLFlBQVksRUFBRSxlQUFlO1FBQzdCLEtBQUssRUFBRSxRQUFRO1FBQ2YsUUFBUSxFQUFFLFdBQVc7UUFDckIsRUFBRSxFQUFFLEtBQUs7UUFDVCxPQUFPLEVBQUUsVUFBVTtRQUNuQixNQUFNLEVBQUUsU0FBUztRQUNqQixTQUFTLEVBQUUsWUFBWTtRQUN2QixLQUFLLEVBQUUsUUFBUTtRQUNmLEtBQUssRUFBRSxRQUFRO1FBQ2YsT0FBTyxFQUFFLFVBQVU7UUFDbkIsWUFBWSxFQUFDLGVBQWU7UUFDNUIsUUFBUSxFQUFFLFdBQVc7UUFDckIsUUFBUSxFQUFFLFdBQVc7UUFDckIsZUFBZSxFQUFFLHFCQUFxQjtRQUN0QyxhQUFhLEVBQUUsZ0JBQWdCO1FBQy9CLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLEtBQUssRUFBRSxRQUFRO1FBQ2YsUUFBUSxFQUFFLFdBQVc7UUFDckIsaUJBQWlCLEVBQUUsb0JBQW9CO1FBQ3ZDLG1CQUFtQixFQUFFLHNCQUFzQjtRQUMzQyxjQUFjLEVBQUUsaUJBQWlCO1FBQ2pDLHFCQUFxQixFQUFFLHdCQUF3QjtRQUMvQyxjQUFjLEVBQUUsaUJBQWlCO1FBQ2pDLHNCQUFzQixFQUFFLHlCQUF5QjtRQUNqRCxzQkFBc0IsRUFBRSx5QkFBeUI7UUFDakQsS0FBSyxFQUFFLFFBQVE7UUFDZixRQUFRLEVBQUUsV0FBVztRQUNyQixNQUFNLEVBQUUsRUFDUDtRQUNELE1BQU0sRUFBQztZQUNILEtBQUssRUFBRSxRQUFRO1NBQ2xCO0tBQ0o7SUFDRCxnQkFBZ0IsRUFBRSxnQkFBZ0I7SUFDbEMsVUFBVSxFQUFFLE9BQU87SUFDbkIsVUFBVSxFQUFFLE9BQU87SUFDbkIsU0FBUyxFQUFFLE1BQU07SUFDakIsa0JBQWtCLEVBQUUsd0JBQXdCO0lBQzVDLHVCQUF1QixFQUFFLHlCQUF5QjtJQUNsRCxzQkFBc0IsRUFBRSxtQkFBbUI7SUFDM0MsV0FBVyxFQUFFLEVBQUU7SUFDZixVQUFVLEVBQUU7UUFDUixXQUFXLEVBQUUsbUJBQW1CO1FBQ2hDLHNCQUFzQixFQUFFLHNCQUFzQjtRQUM5QywwQkFBMEIsRUFBRSw2QkFBNkI7UUFDekQsNEJBQTRCLEVBQUUsMkJBQTJCO0tBQzVEO0lBQ0QsT0FBTyxFQUFDO1FBQ0osVUFBVSxFQUFFLG1DQUFtQztRQUMvQyxXQUFXLEVBQUUsb0NBQW9DO1FBQ2pELGlCQUFpQixFQUFFLDZCQUE2QjtRQUNoRCxVQUFVLEVBQUUsMEpBQTBKO0tBQ3pLO0lBQ0QsaUJBQWlCLEVBQUUsZ0JBQWdCO0NBQ3RDLENBQUEiLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IENPTlNUID0ge1xuICAgIGVwOiB7XG4gICAgICAgIEFQSTogJy9hcGknLFxuICAgICAgICBWMTogJy92MScsXG4gICAgICAgIE1JTkU6ICcvbWluZScsXG4gICAgICAgIEFVVEhFTlRJQ0FURTogJy9hdXRoZW50aWNhdGUnLFxuICAgICAgICBMT0NBTDogJy9sb2NhbCcsXG4gICAgICAgIEZBQ0VCT09LOiAnL2ZhY2Vib29rJyxcbiAgICAgICAgQ0I6ICcvY2InLFxuICAgICAgICBUV0lUVEVSOiAnL3R3aXR0ZXInLFxuICAgICAgICBHT09HTEU6ICcvZ29vZ2xlJyxcbiAgICAgICAgSU5TVEFHUkFNOiAnL2luc3RhZ3JhbScsXG4gICAgICAgIFVTRVJTOiAnL3VzZXJzJyxcbiAgICAgICAgUk9MRVM6ICcvcm9sZXMnLFxuICAgICAgICBCVUNLRVRTOiAnL2J1Y2tldHMnLFxuICAgICAgICBCVUNLRVRfSVRFTVM6Jy9idWNrZXQtaXRlbXMnLFxuICAgICAgICBSRUdJU1RFUjogJy9yZWdpc3RlcicsXG4gICAgICAgIEFQSV9ET0NTOiAnL2FwaS1kb2NzJyxcbiAgICAgICAgQVBJX1NXQUdHRVJfREVGOiAnL3N3YWdnZXItZGVmaW5pdGlvbicsXG4gICAgICAgIE5PVElGSUNBVElPTlM6ICcvbm90aWZpY2F0aW9ucycsXG4gICAgICAgIElNQUdFUzogJy9pbWFnZXMnLFxuICAgICAgICBMT0dJTjogJy9sb2dpbicsXG4gICAgICAgIENBTExCQUNLOiAnL2NhbGxiYWNrJyxcbiAgICAgICAgUkVNT1ZFX1JFRkVSRU5DRVM6ICcvcmVtb3ZlLXJlZmVyZW5jZXMnLFxuICAgICAgICBFTUFJTF9WRVJJRklDQVRJT05TOiAnL2VtYWlsLXZlcmlmaWNhdGlvbnMnLFxuICAgICAgICBQQVNTV09SRF9SRVNFVDogJy9wYXNzd29yZC1yZXNldCcsXG4gICAgICAgIFBBU1NXT1JEX1JFU0VUX1RPS0VOUzogJy9wYXNzd29yZC1yZXNldC10b2tlbnMnLFxuICAgICAgICBWQUxJREFURV9FTUFJTDogJy92YWxpZGF0ZS1lbWFpbCcsXG4gICAgICAgIFBBU1NXT1JEX1JFU0VUX1JFUVVFU1Q6ICcvcGFzc3dvcmQtcmVzZXQtcmVxdWVzdCcsXG4gICAgICAgIElOTElORV9QQVNTV09SRF9DSEFOR0U6ICcvdXBkYXRlLXBhc3N3b3JkLWlubGluZScsXG4gICAgICAgIExJS0VTOiAnL2xpa2VzJyxcbiAgICAgICAgQ09NTUVOVFM6ICcvY29tbWVudHMnLFxuICAgICAgICBjbGllbnQ6IHtcbiAgICAgICAgfSxcbiAgICAgICAgY29tbW9uOntcbiAgICAgICAgICAgIFFVRVJZOiAnL3F1ZXJ5J1xuICAgICAgICB9XG4gICAgfSxcbiAgICBUT0tFTl9IRUFERVJfS0VZOiBcIngtYWNjZXNzLXRva2VuXCIsXG4gICAgQURNSU5fUk9MRTogJ2FkbWluJyxcbiAgICBHVUVTVF9ST0xFOiAnZ3Vlc3QnLFxuICAgIFVTRVJfUk9MRTogJ3VzZXInLFxuICAgIE1PTUVOVF9EQVRFX0ZPUk1BVDogJ1lZWVktTU0tREQgaDptbTpzcyBhIFonLFxuICAgIEFMRU1CSUNfQVBJX1FfQkFDS1BMQU5FOiAnYWxlbWJpYy1hcGktcS1iYWNrcGxhbmUnLFxuICAgIFJFUVVFU1RfVE9LRU5fTE9DQVRJT046ICdhcGktZGVjb2RlZC10b2tlbicsXG4gICAgU0FMVF9ST1VORFM6IDEwLFxuICAgIGVycm9yQ29kZXM6IHtcbiAgICAgICAgRU1BSUxfVEFLRU46ICdFbWFpbEFscmVhZHlUYWtlbicsXG4gICAgICAgIFBBU1NXT1JEX0ZBSUxFRF9DSEVDS1M6ICdQYXNzd29yZEZhaWxlZENoZWNrcycsXG4gICAgICAgIEVNQUlMX1ZFUklGSUNBVElPTl9FWFBJUkVEOiAnRW1haWxWZXJpZmljYXRpb25IYXNFeHBpcmVkJyxcbiAgICAgICAgUEFTU1dPUkRfUkVTRVRfVE9LRU5fRVhQSVJFRDogJ1Bhc3N3b3JkUmVzZXRUb2tlbkV4cGlyZWQnLFxuICAgIH0sXG4gICAgdGVzdGluZzp7XG4gICAgICAgIFVTRVJfRU1BSUw6IFwiaW50ZWdyYXRpb24udXNlci5yb2xlQGFsZW1iaWMuY29tXCIsXG4gICAgICAgIEdVRVNUX0VNQUlsOiBcImludGVncmF0aW9uLmd1ZXN0LnJvbGVAYWxlbWJpYy5jb21cIixcbiAgICAgICAgT1JHQU5JWkFUSU9OX05BTUU6IFwiSW50ZWdyYXRpb25UZXN0T3JnYW5pemF0aW9uXCIsXG4gICAgICAgIFBVU0hfVE9LRU46ICdmTEpFc0RNS24xTTpBUEE5MWJFM0luczMwbjVEa3NZa1o3QVM3bTB4Nm9IOXNTRlViUDAxSnJiN1V5RUxyam84b2JFU1VfSXdKOXFIdXhMWUE1enhMcWpzekp3eXc0TUxvakpVRVVnRW83RFJPaXhvLU55WEZ0WVBna3FfcGd5LVAxdjVua1lpUVlrbjVTb2JaVTdIUE1DaicsXG4gICAgfSxcbiAgICBJTUFHRV9VUExPQURfUEFUSDogJy4vaW1nLXVwbG9hZHMvJyxcbn0iXX0=

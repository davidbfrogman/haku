"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// This import has to be the first thing, so that new relic can instrument everything.
const newRelic = require('newrelic');
const http = require("http");
const https = require("https");
const pem = require("pem");
const debug = require("debug");
const server_1 = require("./server");
exports.App = server_1.default;
const config_1 = require("./config/config");
const log = require("winston");
var httpsServer;
pem.createCertificate({ days: 1, selfSigned: true }, (err, keys) => {
    if (err) {
        log.error(err);
        throw err;
    }
    log.info('creating a server for https');
    this.httpsServer = https.createServer({ key: keys.serviceKey, cert: keys.certificate }, server_1.default.express).listen(9443);
    this.httpsServer.on('error', onError);
    let addrHttps = this.httpsServer.address();
    let bindhttps = (typeof addrHttps === 'string') ? `pipe ${addrHttps}` : `port ${addrHttps.port}`;
    log.info(`https server Listening on ${bindhttps}`);
});
debug('ts-express:server');
const server = http.createServer(server_1.default.express);
exports.server = server;
server.on('error', onError);
server.on('listening', onListening);
function onError(error) {
    if (error.syscall !== 'listen')
        throw error;
    let bind = (typeof config_1.Config.active.get('port') === 'string') ? 'Pipe ' + config_1.Config.active.get('port') : 'Port ' + config_1.Config.active.get('port');
    switch (error.code) {
        case 'EACCES':
            log.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            log.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}
var gracefulShutdown = function () {
    console.log("Received kill signal, shutting down gracefully.");
    server.close(function () {
        console.log("Closed out remaining connections.");
        process.exit();
    });
    // if after 
    setTimeout(function () {
        console.error("Could not close connections in time, forcefully shutting down");
        process.exit();
    }, 10 * 1000);
};
// listen for TERM signal .e.g. kill 
process.on('SIGTERM', gracefulShutdown);
// listen for INT signal e.g. Ctrl-C
process.on('SIGINT', gracefulShutdown);
function onListening() {
    let addr = server.address();
    let bind = (typeof addr === 'string') ? `pipe ${addr}` : `port ${addr}`;
    log.info(`Listening on ${bind}`);
    let addrHttps = this.httpsServer.address();
    let bindhttps = (typeof addrHttps === 'string') ? `pipe ${addrHttps}` : `port ${addrHttps}`;
    log.info(`Listening on ${bindhttps}`);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZlYnJvd24vRG9jdW1lbnRzL2hha3Uvc2VydmVyL3NlcnZlci1lbnRyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNGQUFzRjtBQUN0RixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckMsNkJBQTZCO0FBQzdCLCtCQUErQjtBQUMvQiwyQkFBMkI7QUFDM0IsK0JBQStCO0FBQy9CLHFDQUEyQjtBQXlFbEIsY0F6RUYsZ0JBQUcsQ0F5RUU7QUF4RVosNENBQXlDO0FBQ3pDLCtCQUFnQztBQUVoQyxJQUFJLFdBQVcsQ0FBQztBQUVoQixHQUFHLENBQUMsaUJBQWlCLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUNsRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ1IsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLE1BQU0sR0FBRyxDQUFBO0lBQ1gsQ0FBQztJQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtJQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLGdCQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xILElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN0QyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzNDLElBQUksU0FBUyxHQUFHLENBQUMsT0FBTyxTQUFTLEtBQUssUUFBUSxDQUFDLENB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LEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsU0FBUyxFQUFFLENBQUM7SUFDNUYsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUN4QyxDQUFDIiwiZmlsZSI6InNlcnZlci1lbnRyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaW1wb3J0IGhhcyB0byBiZSB0aGUgZmlyc3QgdGhpbmcsIHNvIHRoYXQgbmV3IHJlbGljIGNhbiBpbnN0cnVtZW50IGV2ZXJ5dGhpbmcuXG5jb25zdCBuZXdSZWxpYyA9IHJlcXVpcmUoJ25ld3JlbGljJyk7XG5pbXBvcnQgKiBhcyBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0ICogYXMgaHR0cHMgZnJvbSAnaHR0cHMnO1xuaW1wb3J0ICogYXMgcGVtIGZyb20gJ3BlbSc7XG5pbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgQXBwIGZyb20gJy4vc2VydmVyJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4vY29uZmlnL2NvbmZpZyc7XG5pbXBvcnQgbG9nID0gcmVxdWlyZSgnd2luc3RvbicpO1xuXG52YXIgaHR0cHNTZXJ2ZXI7XG5cbnBlbS5jcmVhdGVDZXJ0aWZpY2F0ZSh7IGRheXM6IDEsIHNlbGZTaWduZWQ6IHRydWUgfSwgIChlcnIsIGtleXMpID0+IHtcbiAgaWYgKGVycikge1xuICAgIGxvZy5lcnJvcihlcnIpO1xuICAgIHRocm93IGVyclxuICB9XG4gIGxvZy5pbmZvKCdjcmVhdGluZyBhIHNlcnZlciBmb3IgaHR0cHMnKVxuICB0aGlzLmh0dHBzU2VydmVyID0gaHR0cHMuY3JlYXRlU2VydmVyKHsga2V5OiBrZXlzLnNlcnZpY2VLZXksIGNlcnQ6IGtleXMuY2VydGlmaWNhdGUgfSwgQXBwLmV4cHJlc3MpLmxpc3Rlbig5NDQzKTtcbiAgdGhpcy5odHRwc1NlcnZlci5vbignZXJyb3InLCBvbkVycm9yKTtcbiAgbGV0IGFkZHJIdHRwcyA9IHRoaXMuaHR0cHNTZXJ2ZXIuYWRkcmVzcygpO1xuICBsZXQgYmluZGh0dHBzID0gKHR5cGVvZiBhZGRySHR0cHMgPT09ICdzdHJpbmcnKSA/IGBwaXBlICR7YWRkckh0dHBzfWAgOiBgcG9ydCAke2FkZHJIdHRwcy5wb3J0fWA7XG4gIGxvZy5pbmZvKGBodHRwcyBzZXJ2ZXIgTGlzdGVuaW5nIG9uICR7YmluZGh0dHBzfWApO1xufSk7XG5cbmRlYnVnKCd0cy1leHByZXNzOnNlcnZlcicpO1xuXG5jb25zdCBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihBcHAuZXhwcmVzcyk7XG5zZXJ2ZXIub24oJ2Vycm9yJywgb25FcnJvcik7XG5zZXJ2ZXIub24oJ2xpc3RlbmluZycsIG9uTGlzdGVuaW5nKTtcblxuZnVuY3Rpb24gb25FcnJvcihlcnJvcjogTm9kZUpTLkVycm5vRXhjZXB0aW9uKTogdm9pZCB7XG4gIGlmIChlcnJvci5zeXNjYWxsICE9PSAnbGlzdGVuJykgdGhyb3cgZXJyb3I7XG4gIGxldCBiaW5kID0gKHR5cGVvZiBDb25maWcuYWN0aXZlLmdldCgncG9ydCcpID09PSAnc3RyaW5nJykgPyAnUGlwZSAnICsgQ29uZmlnLmFjdGl2ZS5nZXQoJ3BvcnQnKSA6ICdQb3J0ICcgKyBDb25maWcuYWN0aXZlLmdldCgncG9ydCcpO1xuICBzd2l0Y2ggKGVycm9yLmNvZGUpIHtcbiAgICBjYXNlICdFQUNDRVMnOlxuICAgICAgbG9nLmVycm9yKGAke2JpbmR9IHJlcXVpcmVzIGVsZXZhdGVkIHByaXZpbGVnZXNgKTtcbiAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0VBRERSSU5VU0UnOlxuICAgICAgbG9nLmVycm9yKGAke2JpbmR9IGlzIGFscmVhZHkgaW4gdXNlYCk7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxudmFyIGdyYWNlZnVsU2h1dGRvd24gPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coXCJSZWNlaXZlZCBraWxsIHNpZ25hbCwgc2h1dHRpbmcgZG93biBncmFjZWZ1bGx5LlwiKTtcbiAgc2VydmVyLmNsb3NlKGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKFwiQ2xvc2VkIG91dCByZW1haW5pbmcgY29ubmVjdGlvbnMuXCIpO1xuICAgIHByb2Nlc3MuZXhpdCgpXG4gIH0pO1xuICBcbiAgIC8vIGlmIGFmdGVyIFxuICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICBjb25zb2xlLmVycm9yKFwiQ291bGQgbm90IGNsb3NlIGNvbm5lY3Rpb25zIGluIHRpbWUsIGZvcmNlZnVsbHkgc2h1dHRpbmcgZG93blwiKTtcbiAgICAgICBwcm9jZXNzLmV4aXQoKVxuICB9LCAxMCoxMDAwKTtcbn1cblxuLy8gbGlzdGVuIGZvciBURVJNIHNpZ25hbCAuZS5nLiBraWxsIFxucHJvY2Vzcy5vbiAoJ1NJR1RFUk0nLCBncmFjZWZ1bFNodXRkb3duKTtcblxuLy8gbGlzdGVuIGZvciBJTlQgc2lnbmFsIGUuZy4gQ3RybC1DXG5wcm9jZXNzLm9uICgnU0lHSU5UJywgZ3JhY2VmdWxTaHV0ZG93bik7XG5cbmZ1bmN0aW9uIG9uTGlzdGVuaW5nKCk6IHZvaWQge1xuICBsZXQgYWRkciA9IHNlcnZlci5hZGRyZXNzKCk7XG4gIGxldCBiaW5kID0gKHR5cGVvZiBhZGRyID09PSAnc3RyaW5nJykgPyBgcGlwZSAke2FkZHJ9YCA6IGBwb3J0ICR7YWRkcn1gO1xuICBsb2cuaW5mbyhgTGlzdGVuaW5nIG9uICR7YmluZH1gKTtcblxuICBsZXQgYWRkckh0dHBzID0gdGhpcy5odHRwc1NlcnZlci5hZGRyZXNzKCk7XG4gIGxldCBiaW5kaHR0cHMgPSAodHlwZW9mIGFkZHJIdHRwcyA9PT0gJ3N0cmluZycpID8gYHBpcGUgJHthZGRySHR0cHN9YCA6IGBwb3J0ICR7YWRkckh0dHBzfWA7XG4gIGxvZy5pbmZvKGBMaXN0ZW5pbmcgb24gJHtiaW5kaHR0cHN9YCk7XG59XG5cbi8vIFRoZSBhcHBsaWNhdGlvbiBpcyBleHBvcnRlZCBzbyB0aGF0IHdlIGNhbiB1c2UgaXQgaW4gdGVzdGluZyBmcmFtZXdvcmsuXG5leHBvcnQgeyBBcHAsIHNlcnZlciAgfSJdfQ==
